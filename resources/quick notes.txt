MPI_Init(&argc, &argv); <- initialize MPI depending on parameter given on cmd
MPI_Comm_rank(MPI_COMM_WORLD, &myrank); <- update value `myrank` to match MPI this process rank
MPI_Comm_size(MPI_COMM_WORLD, &numprocs); <- update value `numprocs` to match MPI number of process
MPI_Get_processor_name(processor_name, &namelen); <- update value `namelen` to match MPI processor name

MPI_Send(&buf, BUFSIZE, MPI_CHAR, 0, 19, MPI_COMM_WORLD); 
^- send to process 0, message tag 19, value of &buf slicing into 0-BUFSIZE, type char

MPI_Recv(&buf, BUFSIZE, MPI_CHAR, MPI_ANY_SOURCE, 19, MPI_COMM_WORLD); 
^- listen to MPI COMM and wait until any message with tag 19 to be update into buf

MPI_Bcast(&buf, BUFSIZE, MPI_INT, 0, MPI_COMM_WORLD);
^- process 0 -> MPI_Send(&buf, BUFSIZE, MPI_INT, 0, xx, MPI_COMM_WORLD); 
^- other process -> MPI_Recv(&buf, BUFSIZE, MPI_INT, 0, xx, MPI_COMM_WORLD); 

MPI_Finalize(); <- initialize MPI